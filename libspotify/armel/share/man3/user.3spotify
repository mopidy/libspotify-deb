.TH "User handling" 3spotify "Mon Oct 31 2011" "libspotify" \" -*- nroff -*-
.ad l
.nh
.SH NAME
User handling \- 
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBsp_relation_type\fP \fBsp_relation_type\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBsp_relation_type\fP { \fBSP_RELATION_TYPE_UNKNOWN\fP =  0, \fBSP_RELATION_TYPE_NONE\fP =  1, \fBSP_RELATION_TYPE_UNIDIRECTIONAL\fP =  2, \fBSP_RELATION_TYPE_BIDIRECTIONAL\fP =  3 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fBsp_user_canonical_name\fP (\fBsp_user\fP *user)"
.br
.ti -1c
.RI "const char * \fBsp_user_display_name\fP (\fBsp_user\fP *user)"
.br
.ti -1c
.RI "bool \fBsp_user_is_loaded\fP (\fBsp_user\fP *user)"
.br
.ti -1c
.RI "void \fBsp_user_add_ref\fP (\fBsp_user\fP *user)"
.br
.ti -1c
.RI "void \fBsp_user_release\fP (\fBsp_user\fP *user)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBsp_relation_type\fP  \fBsp_relation_type\fP"User relation type 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBsp_relation_type\fP"User relation type 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fISP_RELATION_TYPE_UNKNOWN \fP\fP
Not yet known. 
.TP
\fB\fISP_RELATION_TYPE_NONE \fP\fP
No relation. 
.TP
\fB\fISP_RELATION_TYPE_UNIDIRECTIONAL \fP\fP
The currently logged in user is following this uer. 
.TP
\fB\fISP_RELATION_TYPE_BIDIRECTIONAL \fP\fP
Bidirectional friendship established. 
.SH "Function Documentation"
.PP 
.SS "void sp_user_add_ref (\fBsp_user\fP * user)"Increase the reference count of an user
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP The user object 
.RE
.PP

.SS "const char* sp_user_canonical_name (\fBsp_user\fP * user)"Get a pointer to a string representing the user's canonical username.
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP The Spotify user whose canonical username you would like a string representation of
.RE
.PP
\fBReturns:\fP
.RS 4
A string representing the canonical username. 
.RE
.PP

.SS "const char* sp_user_display_name (\fBsp_user\fP * user)"Get a pointer to a string representing the user's displayable username. If there is no difference between the canonical username and the display name, or if the library does not know about the display name yet, the canonical username will be returned.
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP The Spotify user whose displayable username you would like a string representation of
.RE
.PP
\fBReturns:\fP
.RS 4
A string 
.RE
.PP

.SS "bool sp_user_is_loaded (\fBsp_user\fP * user)"Get load status for a user object. Before it is loaded, only the user's canonical username is known.
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP Spotify user object
.RE
.PP
\fBReturns:\fP
.RS 4
True if user object is loaded, otherwise false 
.RE
.PP

.SS "void sp_user_release (\fBsp_user\fP * user)"Decrease the reference count of an user
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP The user object 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for libspotify from the source code.
